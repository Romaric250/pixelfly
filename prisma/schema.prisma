generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String?
  image         String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Better Auth relations
  sessions      Session[]
  accounts      Account[]

  // App-specific relations
  projects      Project[]
  apiKeys       ProjectApiKey[]
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
  userId    String   @db.ObjectId
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  Templates   Template[]
  ApiKeys     ProjectApiKey[]
}


model ProjectApiKey {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  secretKey    String   @unique
  publicKey String   @unique
  projectId String   @db.ObjectId
  project   Project  @relation(fields: [projectId], references: [id])
  userId   String   @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  templateUrl    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  templateDataId String?       @unique @db.ObjectId
  TemplateData   TemplateData?
  projectId      String        @db.ObjectId
  project        Project       @relation(fields: [projectId], references: [id])
}

model TemplateData {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  templateId String   @unique @db.ObjectId
  template   Template @relation(fields: [templateId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
