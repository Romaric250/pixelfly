// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String   @id @map("_id")
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Better Auth fields
  emailVerified Boolean @default(false)

  // Relations
  accounts Account[]
  sessions Session[]

  @@map("user")
}

// Account model for OAuth providers and credentials
model Account {
  id                String  @id @map("_id")
  accountId         String
  providerId        String
  userId            String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

// Session model for user sessions
model Session {
  id        String   @id @map("_id")
  token     String   @unique
  userId    String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

// Verification model for email verification
model Verification {
  id         String   @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

// Photo Enhancement tracking model
model PhotoEnhancement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?  // Optional - for anonymous users
  filename    String?
  fileSize    Int?     // File size in bytes
  processingTime Float // Processing time in seconds
  enhancementType String? // Type of enhancement applied
  success     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("photo_enhancement")
}

// Photo Watermarking tracking model
model PhotoWatermark {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?  // Optional - for anonymous users
  filename    String?
  fileSize    Int?     // File size in bytes
  processingTime Float // Processing time in seconds
  watermarkText String?
  watermarkStyle String?
  watermarkPosition String?
  photoCount  Int      @default(1) // Number of photos watermarked in this operation
  success     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("photo_watermark")
}
